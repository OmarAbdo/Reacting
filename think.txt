BE Emp.information
------------------





Dashboard?
Present the data with optimized performance
((Technical questions))
> Data schema? DTOs for requests and responses
> How to fetch? when to cache? and when to invalidate the cache?
> After fetching, how to keep the data? a state? (on what level)? browser storage? memory storage? persistant storage?
> App performance. component props and re-rendering. memory consumption, loading/rendering time
> computational efforts: time complexity? improvements?

((user oriented questions))
> are we building a for HR manager who's going to see and maybe edit everyone? or are we building for the indivdual users? in other words what does the user gets to do in terms of functions and CRUD operations 








import {} VS import 
TS's generics
Arrow Functions & Higher-Order Functions


So in react, the life cycle is just mount -> update -> unmount
component render vs mounting

nullish coalescing operator  ?? vs normal ?


Think Stackholder
Customers (Who's the customer? their journey? the UX their famailir with, ..etc)
Us (Frontend concerns) (Managing data, Managing performance, Components architecture, ...etc)
ALSO US: Develop with clean architecture and DDD for REACT
Backend concerns (Shared Schemas and DTOs, ...etc)
Future (Scalability, Testability, Readability, Maintainability ABCability) 

pnpm i react-hook-form
pnpm i @hookform/resolvers
pnpm i zod


useState
userReducer
Context API
Zustand
Redux/Mobex

HTTP caching headers (ETag, Cache-Control), and database-level caching. A well-configured Cache-Control header can eliminate huge classes of client-side problems before they even start.

the 'users', 'posts', 'orders'. The key insight here is that this cache is normalized and disconnected from the UI.




